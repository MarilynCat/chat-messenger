package server;

import java.net.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class MessengerServer {

	// –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π (–ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)
	private static final ArrayList<Session> sessions = new ArrayList<>();

	public static void main(String[] args) {
		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞—Ä–æ–ª—è–º–∏
		Correspondent.registerCorrespondent(new Correspondent(1, "User1", "password1"));
		Correspondent.registerCorrespondent(new Correspondent(2, "User2", "password2"));
		Correspondent.registerCorrespondent(new Correspondent(3, "User3", "password3"));

		try (ServerSocket serverSocket = new ServerSocket(10001)) {
			// –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
			new Thread(new Dispatcher()).start();

			System.out.println("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...");

			// –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
			while (true) {
				Socket socket = serverSocket.accept();
				Session newSession = new Session(socket);

				if (newSession != null) {
					System.out.println("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ");

					// –ù–æ–≤—ã–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ onClientConnected()
					onClientConnected(newSession);

					// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é
					newSession.start();
				} else {
					System.out.println("‚ùå [MessengerServer] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.");
				}
			}

		} catch (BindException e) {
			System.out.println("‚ùå –û—à–∏–±–∫–∞: –ü–æ—Ä—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –¥–≤–∞–∂–¥—ã.");
		} catch (Exception ex) {
			System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: " + ex.getMessage());
			ex.printStackTrace();
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	private static void onClientConnected(Session session) {
		sessions.add(session);  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
		System.out.println("‚úÖ –ü–æ–¥–∫–ª—é—á—ë–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç. ID: " + session.getCorrespondentId());
		sendUserList();  // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
	private static void sendUserList() {
		ListPacket listPacket = new ListPacket();

		// –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
		cleanInactiveSessions();

		// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–æ–∫
		System.out.println("üîç [MessengerServer] –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: " + sessions.size());

		for (Session session : sessions) {
			int correspondentId = session.getCorrespondentId();
			if (correspondentId == -1) {
				System.out.println("‚ö†Ô∏è [MessengerServer] –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞.");
				continue;
			}

			Correspondent correspondent = Correspondent.getCorrespondent(correspondentId);
			if (correspondent != null) {
				listPacket.addItem(correspondent.getId(), correspondent.getLogin());
				System.out.println("üü¢ [MessengerServer] –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–æ–∫: " + correspondent.getLogin());
			} else {
				System.out.println("‚ùå [MessengerServer] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: " + correspondentId);
			}
		}

		System.out.println("‚úÖ [MessengerServer] –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + listPacket.items.size());

		// –†–∞—Å—Å—ã–ª–∞–µ–º –ø–∞–∫–µ—Ç –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
		for (Session session : sessions) {
			try {
				session.sendPacket(listPacket);
				System.out.println("üì§ [MessengerServer] –ü–∞–∫–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É ID: " + session.getCorrespondentId());
			} catch (Exception e) {
				System.out.println("‚ùå [MessengerServer] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " +
						session.getCorrespondentId() + ": " + e.getMessage());
			}
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–∏–≤—à–µ–≥–æ—Å—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	public static void removeSession(Session session) {
		sessions.remove(session);
		sendUserList();  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
		System.out.println("üõë [MessengerServer] –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è. ID: " + session.getCorrespondentId());
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
	private static void cleanInactiveSessions() {
		sessions.removeIf(session -> !session.isAlive());
	}

	// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ getActiveSessions() –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã Dispatcher
	public static List<Session> getActiveSessions() {
		return Collections.unmodifiableList(sessions); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞
	}
}