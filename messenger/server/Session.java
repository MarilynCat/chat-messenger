package server;

import java.io.*;
import java.net.*;
import java.util.Map;
import java.util.concurrent.LinkedBlockingQueue;

public class Session extends Thread {
    private final Socket socket;
    private BufferedReader reader;
    private PrintWriter writer;
    private final LinkedBlockingQueue<Packet> toClientQueue = new LinkedBlockingQueue<>();
    private Thread writerThread;

    public Correspondent correspondent;

    public Session(Socket socket) {
        this.socket = socket;

        writerThread = new Thread(() -> {
            while (!Thread.currentThread().isInterrupted()) {
                try {
                    var p = toClientQueue.take();
                    if (socket.isClosed()) {
                        System.out.println("‚ùóÔ∏è [Session] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç —á–µ—Ä–µ–∑ –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.");
                        continue;
                    }

                    System.out.println("üì§ [Session] –ü–∞–∫–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: " + p.getType());
                    p.writePacket(writer);
                    flush();  // üîπ –Ø–≤–Ω—ã–π –≤—ã–∑–æ–≤ flush() –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    if (writer.checkError()) {
                        System.out.println("‚ùóÔ∏è [Session] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.");
                    } else {
                        System.out.println("‚úÖ [Session] –ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: " + p.getType());
                    }
                } catch (InterruptedException x) {
                    System.out.println("üõë [Session] –ü–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
                    break;
                } catch (Exception e) {
                    System.out.println("‚ùå [Session] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞–∫–µ—Ç–∞: " + e.getMessage());
                    e.printStackTrace();
                }
            }
        });

        writerThread.start();
    }

    public int getCorrespondentId() {
        return (correspondent != null) ? correspondent.getId() : -1;
    }

    public void sendPacket(Packet p) {
        if (p != null) {
            toClientQueue.add(p);
            flush();  // üîπ –î–æ–±–∞–≤–ª–µ–Ω flush() –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            System.out.println("‚úÖ [Session] –ü–∞–∫–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ—Ç–ø—Ä–∞–≤–∫–∏: " + p.getType());
        } else {
            System.out.println("‚ùå [Session] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ null-–ø–∞–∫–µ—Ç–∞. –ü—Ä–æ–ø—É—â–µ–Ω–æ.");
        }
    }

    // üîπ –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ flush()
    public void flush() {
        if (writer != null) {
            try {
                writer.flush();

                // üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–∫–µ—Ç–∞
                if (!socket.isClosed() && socket.isConnected()) {
                    System.out.println("‚úÖ [Session] –ü–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (flush).");
                } else {
                    System.out.println("‚ùóÔ∏è [Session] Flush –≤—ã–∑–≤–∞–Ω –Ω–∞ –∑–∞–∫—Ä—ã—Ç–æ–º —Å–æ–∫–µ—Ç–µ.");
                }
            } catch (Exception e) {
                System.out.println("‚ùå [Session] –û—à–∏–±–∫–∞ –ø—Ä–∏ flush(): " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            System.out.println("‚ùóÔ∏è [Session] –ü–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏ (writer) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
        }
    }

    public void run() {
        try {
            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())), true);

            socket.setSoTimeout(10000);  // –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º-–∞—É—Ç –¥–æ 10 —Å–µ–∫—É–Ω–¥

            while (!socket.isClosed()) {
                if (!reader.ready()) {
                    System.out.println("‚ùóÔ∏è [Session] –ü–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤ –∫ —á—Ç–µ–Ω–∏—é.");
                    Thread.sleep(200); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π
                    continue;
                }

                String rawData = reader.readLine();
                System.out.println("üì• [Session] –ü–æ–ª—É—á–µ–Ω—ã —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: " + rawData);

                if (rawData == null || rawData.isEmpty()) {
                    System.out.println("‚ùóÔ∏è [Session] –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.");
                    Thread.sleep(200); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                    continue;
                }

                var p = Packet.readPacket(reader);
                if (p == null || p.getType().equals(ByePacket.type)) {
                    System.out.println("üõë [Session] ByePacket –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.");
                    close();
                    return;
                }

                if (p instanceof HiPacket hiPacket) {
                    if (isValidUser(hiPacket.login, hiPacket.password)) {
                        System.out.println("‚úÖ [Session] –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + hiPacket.login);

                        correspondent = Correspondent.getCorrespondent(hiPacket.login);
                        if (correspondent == null) {
                            System.out.println("‚ùóÔ∏è [Session] –°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π Correspondent –¥–ª—è: " + hiPacket.login);
                            correspondent = new Correspondent(getCorrespondentId(), hiPacket.login, hiPacket.password);
                            Correspondent.registerCorrespondent(correspondent);
                        }

                        correspondent.activeSession = this;

                        if (writer != null) {
                            System.out.println("üì§ [Session] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WelcomePacket.");
                            sendPacket(new WelcomePacket());
                            flush();
                            sendUserListToClient();
                            System.out.println("‚úÖ [Session] WelcomePacket —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.");
                        } else {
                            System.out.println("‚ùå [Session] –û—à–∏–±–∫–∞: writer = null. –ü–∞–∫–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.");
                        }
                    } else {
                        System.out.println("‚ùå [Session] –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.");
                        sendPacket(new ErrorPacket("Invalid credentials"));
                        flush();
                        close();
                    }
                }

                var e = new Event(this, p);
                Dispatcher.event(e);
            }
        } catch (SocketTimeoutException e) {
            System.out.println("‚ùóÔ∏è [Session] –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.");
            close();
        } catch (IOException | InterruptedException ex) {
            System.out.println("‚ùå [Session] –û—à–∏–±–∫–∞ –≤ session.Session: " + ex.getMessage());
            ex.printStackTrace();
        }
    }

    private boolean isValidUser(String login, String password) {
        Map<String, String> validUsers = Map.of(
                "User1", "password1",
                "User2", "password2",
                "User3", "password3"
        );
        return validUsers.containsKey(login) && validUsers.get(login).equals(password);
    }

    private void sendUserListToClient() {
        ListPacket userListPacket = new ListPacket();
        userListPacket.addItem(1, "User1");
        userListPacket.addItem(2, "User2");
        userListPacket.addItem(3, "User3");

        sendPacket(userListPacket);
        flush();
        System.out.println("üì§ [Session] –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.");
    }

    public void close() {
        try {
            if (correspondent != null) {
                correspondent.activeSession = null;
            }

            if (!socket.isClosed()) {
                socket.shutdownOutput(); // üîπ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                socket.close();
            }

            if (writerThread != null) {
                writerThread.interrupt();
            }

            System.out.println("üõë [Session] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.");
        } catch (Exception ex) {
            System.out.println("‚ùå [Session] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ session.Session: " + ex.getMessage());
            ex.printStackTrace();
        }
    }
}
