package server;

import java.io.*;
import java.net.*;
import java.util.concurrent.LinkedBlockingQueue;

public class Session extends Thread {
    private final Socket socket;
    private BufferedReader reader;
    private PrintWriter writer;
    private final LinkedBlockingQueue<Packet> toClientQueue = new LinkedBlockingQueue<>();
    private Thread writerThread;

    public Correspondent correspondent;

    public Session(Socket socket) {
        this.socket = socket;
    }

    public int getCorrespondentId() {
        return (correspondent != null) ? correspondent.getId() : -1;
    }

    public Socket getSocket() {
        return socket;
    }

    public void sendPacket(Packet p) {
        if (p != null && writer != null && socket.isConnected() && !socket.isClosed()) {
            toClientQueue.add(p);
            flush();
            System.out.println("‚úÖ [Session] –ü–∞–∫–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ—Ç–ø—Ä–∞–≤–∫–∏: " + p.getType());
        } else {
            System.out.println("‚ùå [Session] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ null-–ø–∞–∫–µ—Ç–∞ –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–∫—Ä—ã—Ç—ã–π —Å–æ–∫–µ—Ç. –ü—Ä–æ–ø—É—â–µ–Ω–æ.");
        }
    }

    public void flush() {
        if (writer != null) {
            try {
                writer.flush();
                if (!socket.isClosed() && socket.isConnected()) {
                    System.out.println("‚úÖ [Session] –ü–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (flush). ");
                } else {
                    System.out.println("‚ùóÔ∏è [Session] Flush –≤—ã–∑–≤–∞–Ω –Ω–∞ –∑–∞–∫—Ä—ã—Ç–æ–º —Å–æ–∫–µ—Ç–µ.");
                }
            } catch (Exception e) {
                System.out.println("‚ùå [Session] –û—à–∏–±–∫–∞ –ø—Ä–∏ flush(): " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            System.out.println("‚ùóÔ∏è [Session] –ü–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏ (writer) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
        }
    }

    public void requestUserList() {
        System.out.println("üìã [Session] –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");
        MessengerServer.getInstance().sendUserList();
    }

    public void processPacket(Packet packet) {
        if (packet instanceof HiPacket) {
            HiPacket hiPacket = (HiPacket) packet;
            System.out.println("üì• [Session] –ü–æ–ª—É—á–µ–Ω HiPacket —Å –ª–æ–≥–∏–Ω–æ–º: " + hiPacket.login);

            Correspondent correspondent = Correspondent.getCorrespondent(hiPacket.login);

            if (correspondent != null && Correspondent.validateUser(hiPacket.login, hiPacket.password)) {
                this.correspondent = correspondent;
                correspondent.activeSession = this;

                if (MessengerServer.getInstance() != null) {
                    System.out.println("üì¢ [Session] –í—ã–∑—ã–≤–∞–µ–º sendUserList() –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.");
                    MessengerServer.getInstance().sendUserList();
                }

                System.out.println("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: " + hiPacket.login);
            } else {
                System.out.println("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏–Ω–∞ " + hiPacket.login);
                sendPacket(new ErrorPacket("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"));
                close();
            }
        }
    }

    public void run() {
        try {
            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())), true);

            socket.setSoTimeout(20000);

            writerThread = new Thread(() -> {
                while (!Thread.currentThread().isInterrupted() && !socket.isClosed()) {
                    try {
                        Packet p = toClientQueue.take();
                        if (socket.isClosed()) {
                            System.out.println("‚ùóÔ∏è [Session] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç —á–µ—Ä–µ–∑ –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.");
                            continue;
                        }

                        if (writer != null) {
                            System.out.println("üì§ [Session] –ü–∞–∫–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: " + p.getType());
                            p.writePacket(writer);
                            flush();

                            if (writer.checkError()) {
                                System.out.println("‚ùóÔ∏è [Session] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.");
                            } else {
                                System.out.println("‚úÖ [Session] –ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: " + p.getType());
                            }
                        } else {
                            System.out.println("‚ùå [Session] –û—à–∏–±–∫–∞: writer == null. –ü–∞–∫–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.");
                        }
                    } catch (InterruptedException x) {
                        System.out.println("üõë [Session] –ü–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
                        break;
                    } catch (Exception e) {
                        System.out.println("‚ùå [Session] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞–∫–µ—Ç–∞: " + e.getMessage());
                        e.printStackTrace();
                    }
                }
            });

            writerThread.start();

            while (!socket.isClosed()) {
                if (!reader.ready()) {
                    Thread.sleep(200);
                    continue;
                }

                String rawData = reader.readLine();
                System.out.println("üì• [Session] –ü–æ–ª—É—á–µ–Ω—ã —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: " + rawData);

                if (rawData == null || rawData.isEmpty()) {
                    Thread.sleep(200);
                    continue;
                }

                Packet p = Packet.readPacket(reader);
                if (p instanceof MessagePacket msg) {
                    Correspondent receiver = Correspondent.getCorrespondent(msg.correspondentId);
                    if (receiver != null && receiver.activeSession != null) {
                        receiver.activeSession.sendPacket(msg);
                    } else if (receiver != null) {
                        receiver.storeOfflineMessage(msg);
                        System.out.println("‚ö†Ô∏è [Session] –ü–æ–ª—É—á–∞—Ç–µ–ª—å –æ—Ñ—Ñ–ª–∞–π–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.");
                    } else {
                        System.out.println("‚ùóÔ∏è [Session] –û—à–∏–±–∫–∞: –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                    }
                }
            }
        } catch (Exception ex) {
            System.out.println("‚ùå [Session] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: " + ex.getMessage());
            ex.printStackTrace();
            close();
        }
    }

    public void close() {
        try {
            if (correspondent != null) {
                correspondent.activeSession = null;
            }

            if (!socket.isClosed()) {
                socket.shutdownOutput();
                socket.close();
            }

            if (writerThread != null && writerThread.isAlive()) {
                writerThread.interrupt();
                try {
                    writerThread.join(1000);
                } catch (InterruptedException e) {
                    System.out.println("‚ùóÔ∏è [Session] –ü–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.");
                }
            }

            System.out.println("üõë [Session] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.");
        } catch (Exception ex) {
            System.out.println("‚ùå [Session] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ session.Session: " + ex.getMessage());
            ex.printStackTrace();
        }
    }
}