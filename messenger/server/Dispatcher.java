package server;

import java.util.List;
import java.util.concurrent.LinkedBlockingQueue;

public class Dispatcher implements Runnable {
    private static final LinkedBlockingQueue<Event> packetQueue = new LinkedBlockingQueue<>();

    public static void event(Event e) {
        packetQueue.add(e);
    }

    public void run() {
        System.out.println("‚úÖ [Dispatcher] –ü–æ—Ç–æ–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω.");
        while (true) {
            try {
                var e = packetQueue.take();
                processPacket(e.session, e.packet);
            } catch (InterruptedException x) {
                System.out.println("üõë [Dispatcher] –ü–æ—Ç–æ–∫ –ø—Ä–µ—Ä–≤–∞–Ω.");
                break;
            } catch (Exception e) {
                System.out.println("‚ùå [Dispatcher] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–∫–µ—Ç–∞: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    private void processPacket(Session session, Packet p) {
        if (session == null) {
            System.out.println("‚ùå [Dispatcher] –û—à–∏–±–∫–∞: –°–µ—Å—Å–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.");
            return;
        }

        if (p == null) {
            System.out.println("‚ùå [Dispatcher] –û—à–∏–±–∫–∞: –ü–∞–∫–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.");
            return;
        }

        System.out.println("üì© [Dispatcher] –ü–∞–∫–µ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: " + p.getType());

        switch (p) {
            case HiPacket hiP -> {
                System.out.println("‚úÖ [Dispatcher] –ü–æ–ª—É—á–µ–Ω HiPacket –æ—Ç: " + hiP.login);

                if (hiP.login == null || hiP.password == null) {
                    System.out.println("‚ùå [Dispatcher] –û—à–∏–±–∫–∞: –ü–æ–ª—è –ª–æ–≥–∏–Ω–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—è –ø—É—Å—Ç—ã–µ.");
                    session.sendPacket(new ErrorPacket("Empty login or password."));
                    session.close();
                    return;
                }

                var correspondent = Correspondent.getCorrespondent(hiP.login);

                if (correspondent == null || !Correspondent.validateUser(hiP.login, hiP.password)) {
                    System.out.println("‚ùå [Dispatcher] –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.");
                    session.sendPacket(new ErrorPacket("Invalid credentials."));
                    session.close();
                    return;
                }

                session.correspondent = correspondent;
                correspondent.activeSession = session;

                System.out.println("‚úÖ [Dispatcher] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: " + hiP.login);
                session.sendPacket(new WelcomePacket());
            }

            case ListPacket listP -> {
                System.out.println("‚úÖ [Dispatcher] –ü–æ–ª—É—á–µ–Ω ListPacket —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: " + listP.items.size());
                for (ListPacket.CorrespondentItem item : listP.items) {
                    System.out.println("üü¢ [Dispatcher] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ: " + item.login);
                }
            }

            case MessagePacket msgP -> {
                System.out.println("üí¨ [Dispatcher] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ID: " + session.getCorrespondentId());

                var recipientSession = findSessionById(msgP.correspondentId);
                if (recipientSession != null) {
                    System.out.println("üì® [Dispatcher] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: " + msgP.correspondentId);
                    recipientSession.sendPacket(msgP);
                } else {
                    System.out.println("‚ùå [Dispatcher] –ü–æ–ª—É—á–∞—Ç–µ–ª—å ID " + msgP.correspondentId + " –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                    session.sendPacket(new ErrorPacket("Recipient not found."));
                }
            }

            default -> {
                System.out.println("‚ùóÔ∏è [Dispatcher] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç: " + p.getType());
                session.sendPacket(new ErrorPacket("Unknown packet type."));
            }
        }
    }

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    private Session findSessionById(int correspondentId) {
        List<Session> activeSessions = MessengerServer.getActiveSessions();
        if (activeSessions == null || activeSessions.isEmpty()) {
            System.out.println("‚ùå [Dispatcher] –û—à–∏–±–∫–∞: –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –ø—É—Å—Ç.");
            return null;
        }

        for (Session session : activeSessions) {
            if (session.getCorrespondentId() == correspondentId) {
                return session;
            }
        }

        System.out.println("‚ùå [Dispatcher] –û—à–∏–±–∫–∞: –°–µ—Å—Å–∏—è —Å ID " + correspondentId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        return null;
    }
}
