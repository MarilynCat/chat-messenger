package client;

import server.*;
import server.packets.RequestUserListPacket;

import java.io.*;
import java.net.*;
import java.util.concurrent.LinkedBlockingQueue;

public class ClientConnection extends Thread {
    private Socket socket;
    private BufferedReader reader;
    private PrintWriter writer;
    private final LinkedBlockingQueue<Packet> toServerQueue = new LinkedBlockingQueue<>();
    private Thread writerThread;
    private MessageListener messageListener;

    private final String username; // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è username –∏ password
    private final String password;

    private Correspondent correspondent;

    public int getCurrentUserId() {
        if (correspondent != null) {
            return correspondent.getId();
        } else {
            System.out.println("‚ùóÔ∏è [ClientConnection] –û—à–∏–±–∫–∞: correspondent –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.");
            return -1;
        }
    }

    public void setCorrespondent(Correspondent correspondent) {
        this.correspondent = correspondent;
    }

    public interface MessageListener {
        void onPacketReceived(Packet packet);
    }

    public ClientConnection(String host, int port, String username, String password, MessageListener listener) throws IOException {
        this.username = username;  // ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
        this.password = password;
        this.socket = new Socket(host, port);
        this.messageListener = listener;

        reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())), true);

        writerThread = new Thread(() -> {
            try {
                while (!Thread.currentThread().isInterrupted()) {
                    Packet packet = toServerQueue.take();

                    if (socket.isClosed()) {
                        System.out.println("‚ùóÔ∏è [ClientConnection] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç —á–µ—Ä–µ–∑ –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.");
                        continue;
                    }

                    System.out.println("üì§ [ClientConnection] –ü–∞–∫–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: " + packet.getType());
                    packet.writePacket(writer);
                    writer.flush();
                    if (writer.checkError()) {
                        System.out.println("‚ùóÔ∏è [ClientConnection] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.");
                    } else {
                        System.out.println("‚úÖ [ClientConnection] –ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: " + packet.getType());
                    }
                }
            } catch (InterruptedException e) {
                System.out.println("üõë [ClientConnection] –ü–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏ –ø—Ä–µ—Ä–≤–∞–Ω.");
            } catch (Exception ex) {
                System.out.println("‚ùå [ClientConnection] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞–∫–µ—Ç–∞: " + ex.getMessage());
                ex.printStackTrace();
            } finally {
                close();
            }
        });

        writerThread.start();

        // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º HiPacket —Å —è–≤–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö
        sendHiPacket(this.username, this.password); // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    }

    // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ HiPacket
    public void sendHiPacket(String login, String password) {
        try {
            HiPacket hiPacket = new HiPacket(login, password);
            sendPacket(hiPacket); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
            System.out.println("‚úÖ [ClientConnection] –ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: HI");
        } catch (Exception e) {
            System.out.println("‚ùå [ClientConnection] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ HiPacket: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void sendPacket(Packet packet) {
        if (socket.isClosed() || !socket.isConnected()) {
            System.out.println("‚ùóÔ∏è [ClientConnection] –ü–∞–∫–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.");
            return;
        }

        try {
            toServerQueue.add(packet);
        } catch (Exception e) {
            System.out.println("‚ùå [ClientConnection] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å: " + e.getMessage());
        }
    }

    @Override
    public void run() {
        try {
            final int RETRY_DELAY_MS = 100;
            while (!socket.isClosed()) {
                System.out.println("üîé [ClientConnection] –û–∂–∏–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...");

                if (!reader.ready()) {
                    System.out.println("‚è≥ [ClientConnection] –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç, –æ–∂–∏–¥–∞–Ω–∏–µ...");
                    Thread.sleep(RETRY_DELAY_MS);
                    continue;
                }

                Packet packet = Packet.readPacket(reader);
                if (packet == null) {
//                    System.out.println("‚ùóÔ∏è [ClientConnection] –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞–∫–µ—Ç, –æ–∂–∏–¥–∞–Ω–∏–µ...");
                    Thread.sleep(RETRY_DELAY_MS);
                    continue;
                }

                if (packet instanceof WelcomePacket wp) {
                    System.out.println("‚úÖ [ClientConnection] –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è userId –∏–∑ –ø–∞–∫–µ—Ç–∞
                    this.correspondent = new Correspondent(wp.userId, this.username, this.password);
                    requestUserList();  // –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ correspondent
                } else if (packet instanceof ListPacket listPacket) {
                    System.out.println("‚úÖ [ClientConnection] –ü–æ–ª—É—á–µ–Ω ListPacket —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + listPacket.items.size());
                    if (messageListener != null) {
                        messageListener.onPacketReceived(listPacket);
                    } else {
                        System.out.println("‚ùóÔ∏è [ClientConnection] MessageListener –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è.");
                    }
                } else if (packet instanceof ErrorPacket) {
                    System.out.println("‚ùå [ClientConnection] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + ((ErrorPacket) packet).getMessage());
                    close();
                    break;
                } else {
                    if (messageListener != null) {
                        messageListener.onPacketReceived(packet);
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("‚ùå [ClientConnection] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–∞: " + e.getMessage());
            e.printStackTrace();
        } finally {
            close();
        }
    }


    private void requestUserList() {
        System.out.println("üìã [ClientConnection] –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");
        RequestUserListPacket requestUserListPacket = new RequestUserListPacket();
        sendPacket(requestUserListPacket);
    }

    public void close() {
        try {
            System.out.println("üõë [ClientConnection] –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");

            if (writerThread != null) {
                writerThread.interrupt();
                try {
                    writerThread.join(1000);
                } catch (InterruptedException e) {
                    System.out.println("‚ùóÔ∏è [ClientConnection] –ü–æ—Ç–æ–∫ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.");
                    Thread.currentThread().interrupt();
                }
            }

            if (socket != null && !socket.isClosed()) {
                socket.shutdownOutput();
                socket.close();
            }
        } catch (Exception ex) {
            System.out.println("‚ùå [ClientConnection] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: " + ex.getMessage());
            ex.printStackTrace();
        }
    }
}
