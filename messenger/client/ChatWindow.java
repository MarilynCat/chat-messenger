package client;

import client.ClientConnection;
import server.*;
import server.packets.RequestUserListPacket;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.Map;

public class ChatWindow extends JFrame {
    private static ChatWindow instance;
    private JTextArea chatArea;
    private JTextField messageField;
    private JList<String> userList;
    private DefaultListModel<String> userListModel;
    private ClientConnection connection;
    private String username;
    private String selectedUser;
    private final Map<String, Integer> userIdMap = new HashMap<>();

    public ChatWindow(ClientConnection connection, String username) {
        this.connection = connection;
        this.username = username;
        instance = this;

        setTitle("Chat - " + username);
        setSize(700, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        initUI();

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userListModel.addElement("–í—ã: " + username);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        connection.sendPacket(new RequestUserListPacket());

        userList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                String selected = userList.getSelectedValue();
                if (selected != null && !selected.startsWith("–í—ã: ")) {
                    selectedUser = selected;
                    chatArea.append("üí¨ –ù–∞—á–∞—Ç –¥–∏–∞–ª–æ–≥ —Å " + selectedUser + "\n");

                    if (!userIdMap.containsKey(selectedUser)) {
                        chatArea.append("‚ùå –û—à–∏–±–∫–∞: –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n");
                    }
                }
            }
        });
    }

    private void initUI() {
        setLayout(new BorderLayout());

        // ---------------------- –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–ª–µ–≤–∞—è –ø–∞–Ω–µ–ª—å) ----------------------
        JPanel contactsPanel = new JPanel();
        contactsPanel.setLayout(new BoxLayout(contactsPanel, BoxLayout.Y_AXIS));
        contactsPanel.setBackground(new Color(30, 30, 30));
        contactsPanel.setPreferredSize(new Dimension(250, 600));

        JLabel profileLabel = new JLabel("–í—ã: " + username);
        profileLabel.setForeground(Color.WHITE);
        profileLabel.setBorder(new EmptyBorder(10, 10, 10, 10));

        contactsPanel.add(profileLabel);

        userListModel = new DefaultListModel<>();
        userList = new JList<>(userListModel);
        userList.setBackground(new Color(40, 40, 40));
        userList.setForeground(Color.WHITE);
        userList.setSelectionBackground(new Color(50, 200, 100));

        JScrollPane userScrollPane = new JScrollPane(userList);
        contactsPanel.add(userScrollPane);

        // ---------------------- –ü–∞–Ω–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å) ----------------------
        JPanel chatPanel = new JPanel();
        chatPanel.setLayout(new BorderLayout());
        chatPanel.setBackground(new Color(20, 20, 20));

        JLabel chatTitle = new JLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", JLabel.CENTER);
        chatTitle.setForeground(Color.WHITE);
        chatTitle.setBackground(new Color(30, 30, 30));
        chatTitle.setOpaque(true);
        chatTitle.setBorder(new EmptyBorder(10, 0, 10, 0));

        chatArea = new JTextArea();
        chatArea.setEditable(false);
        chatArea.setBackground(new Color(25, 25, 25));
        chatArea.setForeground(Color.WHITE);
        chatArea.setBorder(new EmptyBorder(10, 10, 10, 10));

        JScrollPane chatScrollPane = new JScrollPane(chatArea);

        chatPanel.add(chatTitle, BorderLayout.NORTH);
        chatPanel.add(chatScrollPane, BorderLayout.CENTER);

        // ---------------------- –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ----------------------
        JPanel inputPanel = new JPanel(new BorderLayout());
        inputPanel.setBackground(new Color(30, 30, 30));

        messageField = new JTextField();
        JButton sendButton = new JButton("‚û§");

        inputPanel.add(messageField, BorderLayout.CENTER);
        inputPanel.add(sendButton, BorderLayout.EAST);

        chatPanel.add(inputPanel, BorderLayout.SOUTH);

        // ---------------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π –≤ –æ–±—â–∏–π –º–∞–∫–µ—Ç ----------------------
        add(contactsPanel, BorderLayout.WEST);
        add(chatPanel, BorderLayout.CENTER);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        messageField.addActionListener(e -> sendMessage());
        sendButton.addActionListener(e -> sendMessage());
    }

    private void sendMessage() {
        String text = messageField.getText().trim();
        if (text.isEmpty()) return;

        if (selectedUser == null || selectedUser.equals("–í—ã: " + username)) {
            chatArea.append("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.\n");
            return;
        }

        if (!userIdMap.containsKey(selectedUser)) {
            chatArea.append("‚ùå –û—à–∏–±–∫–∞: –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n");
            return;
        }

        Integer correspondentId = userIdMap.get(selectedUser);

        if (correspondentId == null || correspondentId == -1) {
            chatArea.append("‚ùå –û—à–∏–±–∫–∞: –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ñ—Ñ–ª–∞–π–Ω.\n");
            return;
        }

        MessagePacket msgPacket = new MessagePacket(connection.getCurrentUserId(), correspondentId, text);
        connection.sendPacket(msgPacket);

        displayOutgoingMessage("Me to " + selectedUser + ": " + text);
        messageField.setText("");
    }

    public void displayIncomingPacket(Packet packet) {
        System.out.println("üì© [ChatWindow] –ü–∞–∫–µ—Ç –ø–æ–ª—É—á–µ–Ω: " + packet.getType());

        if (packet instanceof ListPacket listPacket) {
            updateUserList(listPacket);
        }

        if (packet instanceof MessagePacket) {
            MessagePacket msg = (MessagePacket) packet;
            displayIncomingMessage("üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID " + msg.senderId + ": " + msg.text);
        }

        if (packet instanceof WelcomePacket) {
            chatArea.append("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...\n");
            connection.sendPacket(new RequestUserListPacket());  // ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        }

    }

    private void updateUserList(ListPacket listPacket) {
        SwingUtilities.invokeLater(() -> {
            userListModel.clear();
            userListModel.addElement("–í—ã: " + username); // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–±—è –≤ —Å–ø–∏—Å–æ–∫
            userIdMap.clear();

            if (listPacket == null || listPacket.items.isEmpty()) {
                chatArea.append("‚ùóÔ∏è–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∏–∞–ª–æ–≥–∞.\n");
                System.out.println("‚ùóÔ∏è [ChatWindow] –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!");
                return;
            }

            for (ListPacket.CorrespondentItem item : listPacket.items) {
                if (!item.login.equals(username)) {  // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    userListModel.addElement(item.login);
                    userIdMap.put(item.login, item.id);
                    System.out.println("‚ûï [ChatWindow] –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–æ–∫: " + item.login);
                }
            }

            chatArea.append("‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª—ë–Ω.\n");
        });
    }

    public void displayIncomingMessage(String message) {
        SwingUtilities.invokeLater(() -> chatArea.append(message + "\n"));
    }

    public void displayOutgoingMessage(String message) {
        SwingUtilities.invokeLater(() -> chatArea.append(message + "\n"));
    }

    public static ChatWindow getInstance() {
        return instance;
    }
}
